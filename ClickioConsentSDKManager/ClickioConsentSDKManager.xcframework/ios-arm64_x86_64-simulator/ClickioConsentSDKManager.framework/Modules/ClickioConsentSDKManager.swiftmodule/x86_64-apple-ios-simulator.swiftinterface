// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ClickioConsentSDKManager
import AppTrackingTransparency
import Combine
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency final public class ClickioConsentSDK : ObjectiveC.NSObject, WebKit.WKUIDelegate {
  @objc @_Concurrency.MainActor public static let shared: ClickioConsentSDKManager.ClickioConsentSDK
  @objc @_Concurrency.MainActor final public func initialize(configuration: ClickioConsentSDKManager.ClickioConsentSDK.Config) async
  @objc @_Concurrency.MainActor @preconcurrency final public func onReady(listener: @escaping () -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency final public func onConsentUpdated(listener: @escaping () -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency final public func checkConsentScope() -> Swift.String?
  @_Concurrency.MainActor @preconcurrency final public func checkConsentState() -> ClickioConsentSDKManager.ClickioConsentSDK.ConsentState?
  @_Concurrency.MainActor @preconcurrency final public func checkConsentForPurpose(purposeId: Swift.Int) -> Swift.Bool?
  @_Concurrency.MainActor @preconcurrency final public func checkConsentForVendor(vendorId: Swift.Int) -> Swift.Bool?
  @_Concurrency.MainActor @preconcurrency final public func openDialog(mode: ClickioConsentSDKManager.ClickioConsentSDK.DialogMode = .default, language: Swift.String? = nil, in parentViewController: UIKit.UIViewController, showATTFirst: Swift.Bool, alwaysShowCMP: Swift.Bool, attNeeded: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency final public func setLogsMode(_ mode: ClickioConsentSDKManager.EventLogger.Mode)
  @objc deinit
}
extension ClickioConsentSDKManager.ClickioConsentSDK {
  @objc @objcMembers public class Config : ObjectiveC.NSObject {
    @objc public init(clientId: Swift.String, appLanguage: Swift.String? = nil)
    @objc deinit
  }
}
extension ClickioConsentSDKManager.ClickioConsentSDK {
  public enum ConsentState {
    case notApplicable
    case gdprNoDecision
    case gdprDecisionObtained
    case us
    public var rawValue: Swift.String {
      get
    }
    public static func == (a: ClickioConsentSDKManager.ClickioConsentSDK.ConsentState, b: ClickioConsentSDKManager.ClickioConsentSDK.ConsentState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DialogMode {
    case `default`
    case resurface
    public static func == (a: ClickioConsentSDKManager.ClickioConsentSDK.DialogMode, b: ClickioConsentSDKManager.ClickioConsentSDK.DialogMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class ConsentDataManager : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor public static let shared: ClickioConsentSDKManager.ConsentDataManager
  final public var consentUpdatedPublisher: Combine.AnyPublisher<Swift.Void, Swift.Never> {
    get
  }
  @objc deinit
}
final public class ATTManager {
  @_Concurrency.MainActor public static let shared: ClickioConsentSDKManager.ATTManager
  public init()
  public typealias ATTPermissionCallback = @_Concurrency.MainActor (_ isGrantedAccess: Swift.Bool) -> Swift.Void
  final public func requestPermission(completion: @escaping ClickioConsentSDKManager.ATTManager.ATTPermissionCallback)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class EventLogger : ObjectiveC.NSObject {
  public enum Mode {
    case disabled
    case verbose
    public static func == (a: ClickioConsentSDKManager.EventLogger.Mode, b: ClickioConsentSDKManager.EventLogger.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum EventLevel : Swift.Int {
    case error
    case info
    case debug
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  final public func setMode(_ mode: ClickioConsentSDKManager.EventLogger.Mode)
  final public func setLogLevel(_ level: ClickioConsentSDKManager.EventLogger.EventLevel)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ExportData : ObjectiveC.NSObject {
  @objc final public func getTCString() -> Swift.String?
  @objc final public func getACString() -> Swift.String?
  @objc final public func getGPPString() -> Swift.String?
  final public func getGoogleConsentMode() -> ClickioConsentSDKManager.GoogleConsentStatus?
  @objc final public func getConsentedTCFVendors() -> [Swift.Int]?
  @objc final public func getConsentedTCFLiVendors() -> [Swift.Int]?
  @objc final public func getConsentedTCFPurposes() -> [Swift.Int]?
  @objc final public func getConsentedTCFLiPurposes() -> [Swift.Int]?
  @objc final public func getConsentedGoogleVendors() -> [Swift.Int]?
  @objc final public func getConsentedOtherVendors() -> [Swift.Int]?
  @objc final public func getConsentedOtherLiVendors() -> [Swift.Int]?
  @objc final public func getConsentedNonTcfPurposes() -> [Swift.Int]?
  @objc override dynamic public init()
  @objc deinit
}
public struct GoogleConsentStatus {
  public var analyticsStorageGranted: Swift.Bool
  public var adStorageGranted: Swift.Bool
  public var adUserDataGranted: Swift.Bool
  public var adPersonalizationGranted: Swift.Bool
}
extension ClickioConsentSDKManager.ClickioConsentSDK : Swift.Sendable {}
extension ClickioConsentSDKManager.ClickioConsentSDK.ConsentState : Swift.Equatable {}
extension ClickioConsentSDKManager.ClickioConsentSDK.ConsentState : Swift.Hashable {}
extension ClickioConsentSDKManager.ClickioConsentSDK.DialogMode : Swift.Equatable {}
extension ClickioConsentSDKManager.ClickioConsentSDK.DialogMode : Swift.Hashable {}
extension ClickioConsentSDKManager.EventLogger.Mode : Swift.Equatable {}
extension ClickioConsentSDKManager.EventLogger.Mode : Swift.Hashable {}
extension ClickioConsentSDKManager.EventLogger.EventLevel : Swift.Equatable {}
extension ClickioConsentSDKManager.EventLogger.EventLevel : Swift.Hashable {}
extension ClickioConsentSDKManager.EventLogger.EventLevel : Swift.RawRepresentable {}
